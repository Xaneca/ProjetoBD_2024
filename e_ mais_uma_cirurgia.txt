CREATE OR REPLACE PROCEDURE addHosp(
    IN nova_cama smallint, 
    IN enf_id bigint,
    IN hosp_time timestamp,
    IN descript varchar(512),
    IN paciente_cc bigint,
    IN preco real,
    OUT var integer)
LANGUAGE plpgsql
AS $$
DECLARE
    cursor_hosp CURSOR FOR
        SELECT cama
		FROM hospitalizacao h
		INNER JOIN entrada_conta e ON e.id = h.entrada_conta_id
		WHERE h.cama = nova_cama
		  AND e.datahoraentrada <= hosp_time
		  AND (e.datahorasaida IS NULL OR e.datahorasaida >= hosp_time);	-- NULL significa q n se sabe quando vai sair
    rec RECORD;
    ultimo_id entrada_conta.id%TYPE;
    enf_cc pessoa.cc%TYPE;
BEGIN
    -- Inicializar a variável de saída
    var := 0;

    -- Abrir o cursor
    OPEN cursor_hosp;

    -- Buscar a primeira linha
    FETCH cursor_hosp INTO rec;

    -- Verificar se não encontrou registros
    IF NOT FOUND THEN
        -- Buscar o CC do enfermeiro & Verificar se o enfermeiro existe
		BEGIN
			SELECT pessoa_cc INTO enf_cc
				FROM empregado emp
				INNER JOIN enfermeiro e on emp.pessoa_cc = e.empregado_pessoa_cc
				WHERE id = enf_id;
				IF NOT FOUND THEN
					RAISE EXCEPTION 'Enfermeiro com ID % não encontrado', enf_id;
				END IF;
		END;
		
		-- Buscar o CC do paciente e verificar se ele existe
        BEGIN
            SELECT cc
            FROM pessoa
            WHERE cc = paciente_cc;
            IF NOT FOUND THEN
                RAISE EXCEPTION 'Paciente com CC % não encontrado', paciente_cc;
            END IF;
        END;

        -- Inserir em entrada_conta
        INSERT INTO entrada_conta (datahoraentrada, descricao, conta_valortotal, conta_valorpago, paciente_pessoa_cc) 
        VALUES (hosp_time, descript, preco, 0, cc) -- cc do paciente
        RETURNING id INTO ultimo_id;

        -- Inserir em consulta
        INSERT INTO hospitalizacao (cama, enfermeiro_empregado_pessoa_cc, entrada_conta_id)
        VALUES (nova_cama, enf_cc, ultimo_id);

        -- Definir a variável de saída para 1
        var := ultimo_id;
    END IF;

    -- Fechar o cursor
    CLOSE cursor_hosp;
EXCEPTION
    WHEN OTHERS THEN
        -- Se ocorrer um erro, relançar a exceção
        RAISE;
END;
$$;


________________________

CREATE OR REPLACE PROCEDURE addSurg(
    IN nova_sala smallint, 
    IN med_id bigint,
    IN surg_time timestamp,
    IN descript varchar(512),
    IN paciente_cc bigint,
    IN preco real,
	IN id_hosp integer,
    OUT var integer)
LANGUAGE plpgsql
AS $$
DECLARE
    cursor_surg CURSOR FOR
        SELECT sala
		FROM cirurgia c
		INNER JOIN entrada_conta e ON e.id = c.entrada_conta_id
		WHERE c.sala = nova_sala
		  AND e.datahoraentrada <= surg_time_end
		  AND (e.datahorasaida IS NULL OR e.datahorasaida >= surg_time);	-- NULL significa q n se sabe quando vai sair
    rec RECORD;
    --ultimo_id entrada_conta.id%TYPE;
    med_cc pessoa.cc%TYPE;
BEGIN
    -- Inicializar a variável de saída
    var := 0;

    -- Abrir o cursor
    OPEN cursor_surg;

    -- Buscar a primeira linha
    FETCH cursor_surg INTO rec;

    -- Verificar se não encontrou registros
    IF NOT FOUND THEN
        -- Buscar o CC do medico & Verificar se o enfermeiro existe
		BEGIN
			SELECT pessoa_cc INTO med_cc
				FROM empregado emp
				INNER JOIN medico m on emp.pessoa_cc = m.empregado_pessoa_cc
				WHERE id = med_id;
				IF NOT FOUND THEN
					RAISE EXCEPTION 'Medico com ID % não encontrado', med_id;
				END IF;
		END;
		
		-- verificar se medico disponivel
		if exists(
			select 1 from entrada_conta e
			full join consulta co on e.id = co.entrada_conta_id
			full join cirurgia ci on e.id = ci.entrada_conta_id
				where (ci.medico_empregado_pessoa_cc = 300300300 or co.medico_empregado_pessoa_cc = 300300300)
				AND e.datahoraentrada <= surg_time_end AND (e.datahorasaida IS NULL OR e.datahorasaida >= surg_time)
			)
		then
			RAISE EXCEPTION 'Medico ocupado neste horario';
		END if;
		
		-- Buscar o CC do paciente e verificar se ele existe
        BEGIN
            SELECT cc
            FROM pessoa
            WHERE cc = paciente_cc;
            IF NOT FOUND THEN
                RAISE EXCEPTION 'Paciente com CC % não encontrado', paciente_cc;
            END IF;
        END;

        -- Inserir em entrada_conta
        INSERT INTO entrada_conta (datahoraentrada, descricao, conta_valortotal, conta_valorpago, paciente_pessoa_cc) 
        VALUES (hosp_time, descript, preco, 0, cc) -- cc do paciente
		RETURNING id INTO var;

        -- Inserir em cirurgia
        INSERT INTO cirurgia (sala, medico_empregado_pessoa_cc, entrada_conta_id)
        VALUES (nova_sala, med_cc, var);

		-- Inserir em cirurgia_hospitalizacao
		insert into cirurgia_hospitalizacao (cirurgia_entrada_conta_id, hospitalizacao_entrada_conta_id)
		values (var, id_hosp);
        
    END IF;

    -- Fechar o cursor
    CLOSE cursor_surg;
EXCEPTION
    WHEN OTHERS THEN
        -- Se ocorrer um erro, relançar a exceção
        RAISE;
END;


___________________________	ADICIONAR ENFERMEIRO À CIRURGIA

CREATE OR REPLACE PROCEDURE addEnfToSurg(
	IN enf_id bigint,
	IN surg_id integer,
	OUT var integer
)
LANGUAGE plpgsql
AS $$
DECLARE
	enf_cc pessoa.cc%TYPE;
BEGIN
	-- Buscar o CC do enfermeiro & Verificar se o enfermeiro existe
	BEGIN
		SELECT pessoa_cc INTO enf_cc
			FROM empregado emp
			INNER JOIN enfermeiro e on emp.pessoa_cc = e.empregado_pessoa_cc
			WHERE id = enf_id;
			IF NOT FOUND THEN
				RAISE EXCEPTION 'Enfermeiro com ID % não encontrado', enf_id;
			END IF;
	END;
	
	insert into enfermeiro_cirurgia(enfermeiro_empregado_pessoa_cc, cirurgia_entrada_conta_id)
	values(enf_cc, surg_id);
	
EXCEPTION
    WHEN OTHERS THEN
        -- Se ocorrer um erro, relançar a exceção
        RAISE;
END;
$$;